#!/usr/bin/env node
'use strict';

var UhkConnection = require('./lib/UhkConnection');
var R = require('ramda');
var path = require('path');

var commands = getTypistFriendlyObjectKeys(UhkConnection.COMMANDS);
var args = process.argv.slice(1);
var programName = path.basename(args.shift());
var commandArg = args.shift();

if (!R.contains(commandArg, commands)) {
    console.error('Usage: ' + programName + ' COMMAND [ARG]');
    console.error(commandArg === undefined
        ? 'No command has been specified.'
        : 'Command "' + commandArg + '" is invalid.');
    console.error('Valid commands: ' + commands.join(', '));
    process.exit(1);
}

var command = UhkConnection.COMMANDS[getTypistUnfriendlyObjectKey(commandArg)];

var uhkConnection = new UhkConnection(UhkConnection.LOG_LEVELS.TRANSFER);

uhkConnection.connect(function(error) {

    if (error) {
        return console.log(error);
    }

    switch (command) {
        case UhkConnection.COMMANDS.REENUMERATE:
            var enumerationModeArg = args.shift();
            var enumerationModes = getTypistFriendlyObjectKeys(UhkConnection.ENUMERATION_MODES);
            if (!R.contains(enumerationModeArg, enumerationModes)) {
                console.error('Usage: %s %s {%s}', programName, commandArg, enumerationModes.join(' | '));
                console.error(enumerationModeArg === undefined
                    ? 'No enumeration mode has been specified.'
                    : 'Enumeration mode "%s" is invalid.', enumerationModeArg);
                process.exit(1);
            }
            var enumerationMode = UhkConnection.ENUMERATION_MODES[getTypistUnfriendlyObjectKey(enumerationModeArg)];
            uhkConnection.sendRequest(command, enumerationMode, function(error, data) {
                console.log('sent request');
            }, false);
            break;
        case UhkConnection.COMMANDS.READ_EEPROM:
            uhkConnection.sendRequest(command, null, function(error, data) {});
            break;
        case UhkConnection.COMMANDS.WRITE_EEPROM:
            var stringToBeSaved =  args.shift();
            if (!stringToBeSaved) {
                console.error('A string has to be specified to be saved into the EEPROM.');
                process.exit(1);
            }
            uhkConnection.sendRequest(command, stringToBeSaved, function(error, data) {});
            break;
    }
});

// Helper functions

function getTypistFriendlyObjectKeys(object) {
    return R.keys(object).map(function(command) {
        return command.toLowerCase().replace(/_/g, '-');
    });
}

function getTypistUnfriendlyObjectKey(key) {
    return key.toUpperCase().replace(/-/g, '_');
}
